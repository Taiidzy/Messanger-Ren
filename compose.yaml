services:

# ======================= Auth Service =======================

  auth-service:
    build:
      context: ./services/auth-service
    container_name: auth-service
    restart: always

    environment:

      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_SERVER: ${POSTGRES_SERVER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}

      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}


    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    ports:
      - "8001:8001"

    expose: 
      - 8001
    networks: 
      - app-network
    depends_on:
      - postgres

# ======================= Chat Service =======================

  chat-service:
    build:
      context: ./services/chat-service # Указывает на текущую директорию, где лежит Dockerfile
    container_name: chat-service
    restart: always
    environment:
      PORT: 3102
      AUTH_SERVICE_URL: http://auth-service:8001/auth-service
      DATABASE_URL: postgresql://Ren:Ren_Tokyo_Ghost@postgres:5432/Messanger-Ren?schema=public
    expose:
      - 3000
    networks:
      - app-network
    depends_on:
      - redis
      - auth-service

# ======================= Message Service =======================

  message-service:
    build:
      context: ./services/message-service # Указывает на текущую директорию, где лежит Dockerfile
    container_name: message-service
    restart: always
    environment:
      APP_PORT: ${MESSAGE_SERVICE_PORT}
      AUTH_HOST: ${AUTH_HOST}
      REDIS_HOST: ${REDIS_URL}

      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_SERVER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
    expose:
      - 3000
    networks:
      - app-network
    depends_on:
      - redis
      - auth-service

# ======================= Online Service =======================

  online-service:
    build:
      context: ./services/online-service # Указывает на текущую директорию, где лежит Dockerfile
    container_name: online-service
    restart: always
    environment:
      PORT: ${ONLINE_SERVICE_PORT}
      AUTH_HOST: ${AUTH_HOST}
      REDIS_HOST: ${REDIS_URL}
    expose:
      - 3101
    networks:
      - app-network
    depends_on:
      - redis
      - auth-service

# ======================= Media Service =======================

  media-service:
    build:
      context: ./services/media-service
    container_name: media-service
    restart: always
    environment:
      APP_PORT: 8003
      AUTH_HOST: ${AUTH_HOST}
      STORAGE_ROOT: /app/storage  # Путь внутри контейнера

      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_SERVER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}

    ports:
      - "8003:8003"

    volumes:
      - ./services/media-service/app/storage:/app/storage  # Монтируем папку для постоянного хранения файлов

    expose:
      - 8003
    networks:
      - app-network
    depends_on:
      - postgres
      - auth-service

# ======================= Profiles Service =======================

  profiles-service:
    build:
      context: ./services/profiles-service
    container_name: profiles-service
    restart: always

    environment:

      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_SERVER: ${POSTGRES_SERVER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}

      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}


    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    ports:
      - "8002:8002"

    volumes:
      - ./services/profiles-service/app/storage:/app/storage

    expose: 
      - 8002
    networks: 
      - app-network
    depends_on:
      - postgres

# ======================= DATABASE =======================

  postgres:
    image: postgres:17
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./docker-services/postgres:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      - app-network

# ======================= NGINX ==========================

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker-services/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker-services/nginx/certs:/etc/letsencrypt
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./docker-services/nginx/logs:/var/log/nginx               # Логи пробрасываем
      - ./docker-services/nginx/blacklist.conf:/etc/nginx/blacklist.conf  # Файл с заблокированными IP
    networks:
      - app-network
    depends_on:
      - auth-service
      - message-service

# ======================= FAIL2BAN ==========================

  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    restart: always
    volumes:
      - ./docker-services/nginx/logs:/var/log/nginx
      - ./docker-services/fail2ban:/data
    environment:
      - TZ=Europe/Moscow
    networks:
      - app-network

# ======================= Prometheus ==========================

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    profiles:
    - "prod"
    volumes:
      - ./docker-services/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app-network
    depends_on:
      - auth-service

# ======================= Grafana ==========================

  grafana:
    image: grafana/grafana
    container_name: grafana
    profiles:
    - "prod"
    volumes:
      - ./docker-services/grafana:/var/lib/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - app-network
    depends_on:
      - prometheus  # Добавляем зависимость

# ======================= Redis ==========================

  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./docker-services/redis/redis-data:/data
      - ./docker-services/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - app-network

# ======================= Loki ==========================

  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    profiles:
    - "prod"
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./docker-services/loki/loki-config.yml:/etc/loki/local-config.yaml
      - ./docker-services/loki/data:/loki
      - ./docker-services/loki/data/wal:/loki/wal
    networks:
      - app-network


# ======================= Promtail ==========================

  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    profiles:
    - "prod"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker-services/promtail/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - app-network

# ======================= NETWORKS ==========================

networks:
  app-network:
    driver: bridge